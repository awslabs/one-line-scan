#!/bin/bash
#
#  Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#  
#  Licensed under the Apache License, Version 2.0 (the "License").
#  You may not use this file except in compliance with the License.
#  A copy of the License is located at
#  
#      http://www.apache.org/licenses/LICENSE-2.0
#  
#  or in the "license" file accompanying this file. This file is distributed 
#  on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either 
#  express or implied. See the License for the specific language governing 
#  permissions and limitations under the License.
#
# Build project binaries with goto-gcc, or afl-gcc, or other backends.
#
# Usage: see usage() function below

#
# default script arguments
#
# default arguments
NOANALYSIS=              # by default, we use analysis
ANALYSISONLY=            # by default, we will also build
LINK=--link              # by default, enforce goto-ld for linking
USE_AFL=                 # tell injection to also wrap for afl
USE_GOTOCC=--use-gotocc  # tell injection to also wrap for goto-cc (CPROVER)
USE_FORTIFY=             # tell injection to also wrap for Fortify
USE_SMATCH=              # tell injection to also wrap smatch
USE_CPPCHECK=            # analyze with cppcheck
FORTIFY_ANALYSIS_CONFIG= # extra options that should be passed to analysis of fortify
USE_PLAIN=               # use a simple plain wrapper to log gcc calls
USE_INFER=               # use a simple infer wrapper to log gcc calls
EXPERT=                  # options that will be forwarded to the wrapper
WORKINGDIR=OLS           # the default output directory
USE_EXISTING=            # use output directory even if it exists already
CONTINUE=                # only perform analysis, use existing directory
KEEP_GOING=              # continue build with make, if single targets fail
NUM_LOCKS=2              # use multiple compiler processes in parallel
STOP_AFTER_FAIL=         # do not perform analysis if build did not return with 0
EXTRA_CFLAGS=            # add these options to the injection setup call
ANALYSIS_OPTIONS=        # additional options that can be specified to the analysis tools
BINARY_ORIGIN=           # place where the analyzed binary comes from (to track binaries more easily)
TOOLPREFIX=              # might wrap a variant of gcc additionally to gcc
TOOLSUFFIX=              # might wrap a variant of gcc additionally to gcc
GITUPSTREAM=             # display findings only for commits made after this ID
GITBRANCH=               # display findings only for commits until this point
ADD_TO_PATH=             # add these values to the PATH environment variable before continuing


# locate the script to be able to call related scripts
SCRIPT=$(readlink -e "$0")
SCRIPTDIR=$(dirname "$SCRIPT")

# functions that are used
source "$SCRIPTDIR"/utils/log.sh

# rewrite first argument to a directory name that does not exist yet
rewriteToNonexisting ()
{
	if [ -z $1 ]
	then
		return
	fi

	local STARTDIR="$1"
	local TRY=0

	local FINALDIR="$STARTDIR"
	while [ -d "$FINALDIR" ]
	do
		echo "directory $FINALDIR exists already" 1>&2
		TRY=$(($TRY+1))
		FINALDIR="$STARTDIR$TRY"
	done
	echo "$FINALDIR"
}

# store environment when building with one-line-scan
storeEnvironmentInfo()
{
  LOG="$1"/environmentInfo.txt
  shift

  echo "Build command: $@" > $LOG
  echo "CBMC version: $(cbmc --version 2> /dev/null)" >> $LOG
  echo "CBMC creation date: $( ls -lh $(which cbmc 2> /dev/null) | awk '{print $6,$7,$8}' )" >> $LOG
  echo "Calling directory: $(pwd)" >> $LOG
  echo "Content of the calling directory:" >> $LOG
  ls -lh >> $LOG 2>&1
  echo "Environment variables:" >> $LOG
  echo "Path: $PATH" >> $LOG 2>&1
}

usage()
{	
  cat << EOF
usage: [ENVIRONMENTSETUP] one-line-scan [OPTIONS] -- <build-command>

  ENVIRONMENTSETUP:
    Set environment variables before the one-line-scan command

  OPTIONS:
    --help       (-h)     show this help
    --debug      (-d)     run in verbose mode and display commands before they are executed
    --continue   (-c)     continue with the build of a given directory and (re)perform analysis
    --no-analysis         only build, omit analysis
    --analysis-only       do not build, but use the existing directory content to only run analysis
    --expert ARG          forward ARG directly to compiler wrapper setup
    --no-link             allow to fall back to native linker in case goto-ld fails
    --afl                 additionally apply compilation for fuzzing with AFL
    --fortify             run HP Fortify's sourcecodeanalyzer
    --smatch              run smatch (use the SMATCH_EXTRA_ARG environment variable to forward parameter to smatch)
    --cppcheck            analyze with cppcheck
    --no-gotocc           disable default goto-cc compilation
    --plain               log compiler calls with plain wrapper
    --infer               use infer for analysis
    --prefix PRF          additionally to gcc also wrap "PRF"gcc (will not be combined with suffix)
    --suffix SUF          additionally to gcc also wrap gcc"SUF" (will not be combined with prefix)
    --output DIR (-o DIR) set the output directory to DIR
    --forward A B         during execution, a call to command A is replaced with a call to B
    --use-existing        use output directory even if it already exists
    --trunc-existing      use output directory even if it already exists, but clear binaries/libraries of previous calls
    --origin S            string that represents the origin of the analyzed project (git repository, web page, ...)
    --keep-going          when the build process uses "make", use make -k instead
    -j N                  allow the usage of N compiler processes in parallel (at least 2, might cause a mixed up log)
    --stop-after-fail     do not perform analysis, if build process returned with non-zero value
    --extra-cflags OPT    add this option to each compiler call (not linker), can be specified multiple times
    --extra-cflag-set OPT add this option to each compiler call (not linker), OPT will be split by whitespace, each item will be added
    --include-warnings    warn about redundant #include statements
    --symex               perform analysis with symex instead of CBMC
    --analysis-time time  add a maximal analysis time (in seconds)
    --display-upstream ID display findings only for commits made after ID
    --display-branch ID   display findings only for commits until this ID
EOF
}

#
# actual script
#

if [ -z "$*" ]
then
  usage
  exit 1
fi

USER_SPECIFIED_DIR=
# parse arguments
while [ $# -gt 0 ]
do
    case $1 in
    --help | -h)   usage; exit 0;;
    --debug | -d)  set -x;;
    --no-analysis) NOANALYSIS=t;;
    --analysis-only) ANALYSISONLY=t; USE_EXISTING=--re-use;;
    --no-link)     LINK=;;
    --afl)         USE_AFL="--afl";;
    --cppcheck)    USE_CPPCHECK="--cppcheck" ;;
    --fortify)     USE_FORTIFY="--fortify";;
    --fortify-rules)  if [ -n "$2" ]
                      then
                        FORTIFY_ANALYSIS_CONFIG="$FORTIFY_ANALYSIS_CONFIG --rules $2"
                        shift
                      else
                        echo "warning: specified --rules parameter without value"
                      fi
                      ;;
    --smatch)      USE_SMATCH="--smatch";;
    --no-gotocc)   USE_GOTOCC="--no-gotocc";;
    --expert)      if [ -n "$2" ]
                   then
                     EXPERT=" $EXPERT "$2""
                     shift
                   else
                     echo "warning: specified --expert value without parameter"
                   fi
                   ;;
    --plain)       USE_PLAIN="--plain";;
    --infer)       USE_INFER="--infer";;
    --prefix)      if [ -n "$2" ]
                   then
                     TOOLPREFIX+=" --prefix $2"
                     shift
                   fi
                   ;;
    --suffix)      if [ -n "$2" ]
                   then
                     TOOLSUFFIX+=" --suffix $2"
                     shift
                   fi
                   ;;
    --output | -o) WORKINGDIR=$2
                   USER_SPECIFIED_DIR=t
                   shift
                   ;;
    --use-existing)   USE_EXISTING=--re-use;;
    --trunc-existing) USE_EXISTING=--trunc;;
    --origin)      BINARY_ORIGIN=$2; shift;;
    --continue | -c) CONTINUE=t;;
    --keep-going)  KEEP_GOING=t;;
    -j)            if [[ "$2" =~ ^[0-9]+$ ]]
                   then
                     [ $2 -lt 2 ] || NUM_LOCKS=$2
                     shift
                   else
                     echo "warning: specified -j without a number, will not change value"
                   fi
                   ;;
    --stop-after-fail) STOP_AFTER_FAIL=t;;
    --extra-cflags) if [ -n "$2" ]
                    then
                      EXTRA_CFLAGS="$EXTRA_CFLAGS --extra $2"
                      shift
                    fi
                    ;;
    --extra-cflag-set) if [ -n "$2" ]
                       then
                         for flag in $2
                         do
                           EXTRA_CFLAGS+=" --extra $flag"
                         done
                         shift
                       fi
                       ;;
    --symex)         ANALYSIS_OPTIONS="$ANALYSIS_OPTIONS --symex";;
    --analysis-time) ANALYSIS_OPTIONS="$ANALYSIS_OPTIONS --timeout $2"; shift;;
    --include-warnings) EXTRA_CFLAGS="--include-warnings $EXTRA_CFLAGS";;
    --forward)      if [ -n "$3" ] && which "$3" &> /dev/null
                    then
                      EXTRA_CFLAGS="--forward $2 $3 $EXTRA_CFLAGS"
                      shift 2
                    fi ;;
    --display-upstream) GITUPSTREAM="$2"; shift;;
    --display-branch)   GITBRANCH="$2"; shift;;
    --add-to-path) if [ -n "$ADD_TO_PATH" ]
                   then
                     ADD_TO_PATH="$ADD_TO_PATH:$2"
                   else
                     ADD_TO_PATH="$2"
                   fi
                   shift;;
    --)            shift; break ;;
    *)             echo "warning: unknown parameter $1, have you forgotten the '--'? continue with build." 1>&2; break ;;
    esac
    shift
done

# do not continue if no parameter is present
if [ -z "$*" ]; then
	log "stop due to missing build command"
	exit 0
fi

# should we call sub scripts with tracing?
SCRIPT_CALLER=
[[ "$-" != *"x"* ]] || SCRIPT_CALLER="bash -x "

# check whether user specified directory is already there, if we want to build
if [ -n "$USER_SPECIFIED_DIR" ] && \
   [ -d "$WORKINGDIR" ] && \
   [ -z $CONTINUE ] && \
   [ -z $USE_EXISTING ]
then
  echo "error: output directory $WORKINGDIR exists already"
  exit 1
fi

# the command to be executed
log "build command to be executed: $@"

# check whether we can actually execute the command
if ! command -v $1 &> /dev/null
then
  log "error: cannot execute '$@', abort"
  exit 1
fi

# make more tools in path available
[ -n "$ADD_TO_PATH" ] && export PATH=$PATH:$ADD_TO_PATH

# relative path to gcc wrapper tools
INJECT_TOOLS=$SCRIPTDIR/inject-gcc-wrapper
ANALYSIS_TOOLS=$SCRIPTDIR/cbmc-analysis

# Try to figure out the origin of the project automatically
if [ -z "$BINARY_ORIGIN" ]
then
  GIT_REPOSITORY=$(git remote -v 2> /dev/null | grep "^origin" | awk '/(fetch)/ {print $2}')
  GIT_COMMIT=$(git rev-parse --short HEAD 2> /dev/null)
  BINARY_ORIGIN="$GIT_REPOSITORY#$GIT_COMMIT"
  [ -n "$GIT_COMMIT" ] || BINARY_ORIGIN="$(hostname):$(pwd)"
fi

# setup a working directory
# variable will be rewritten to a non-existing directory name, if we did not specify --continue
if [ -z $CONTINUE ] && [ -z "$USER_SPECIFIED_DIR" ] && [ -z $USE_EXISTING ]
then
  WORKINGDIR=$(rewriteToNonexisting $WORKINGDIR)
fi

BUILDRESULT=0
if [ -z $CONTINUE ]
then
  log "working directory: $WORKINGDIR"

  # construct call for injection
  EXTRA_INJECT_OPTIONS=
  if [ -n "$KEEP_GOING" ]
  then
    log "add --keep-going to the setup call"
    EXTRA_INJECT_OPTIONS="$EXTRA_INJECT_OPTIONS --keep-going"
  fi

  WRAPPER_SETUP_OPTIONS="--target "$WORKINGDIR" --origin "$BINARY_ORIGIN" \
    "$LINK" "$USE_EXISTING" "$USE_AFL" "$USE_FORTIFY" "$USE_SMATCH" \
    "$TOOLPREFIX" "$TOOLSUFFIX" -j $NUM_LOCKS "$EXTRA_INJECT_OPTIONS" "$EXTRA_CFLAGS" \
    "$EXPERT" "$USE_GOTOCC"  $USE_CPPCHECK $USE_PLAIN $USE_INFER"
  log $(echo "setting up wrapper with: $WRAPPER_SETUP_OPTIONS" | sed 's/  */ /g')

  # check whether the environment is actually usable for the wrapper injection
  TMP_ERROR=$(mktemp)
  if ! $SCRIPT_CALLER "$INJECT_TOOLS"/check-setup.sh $WRAPPER_SETUP_OPTIONS > $TMP_ERROR 2>&1
  then
    echo "error: check for injecting compiler wrapper failed - abort" 1>&2
    cat $TMP_ERROR 2> /dev/null
    rm -f $TMP_ERROR
    exit 1
  else
    log "wrapper injection check succeeds"
  fi
  rm -f $TMP_ERROR

  # setup the goto-gcc environment, use goto-ld as linking tool
  source $INJECT_TOOLS/setup.sh $WRAPPER_SETUP_OPTIONS

  # store information about the build environment
  storeEnvironmentInfo $WORKINGDIR "$@"

  if [ -z "$ANALYSISONLY" ]
  then
    # execute the actual build, store stdout and stderr in build.log
    log "execute build command"
    "$@" \
      > >(tee -a "$WORKINGDIR"/build.log) 2>&1 || BUILDRESULT=$?
  else
    # we will not build
    log "skipping build command"
  fi

  # restore location to gcc, keep directory
  source $INJECT_TOOLS/remove-wrapper.sh --keep-dir

  # display the result of the build
  log "status of the build: $BUILDRESULT"
else
  log "perform analysis in working directory: $WORKINGDIR"
  if [ ! -d $WORKINGDIR ]
  then
    log "working directory $WORKINGDIR does not exists - abort"
    exit 1
  fi
fi

# stop with build result, if requested
if [ ! -z $STOP_AFTER_FAIL ] && [ $BUILDRESULT -ne 0 ]
then
  log "stop after build failed with exit status $BUILDRESULT"
  exit $BUILDRESULT 
fi

mkdir -p $WORKINGDIR/log
# perform analysis only if not forbidden before
ANALYSISRESULT=0

# evaluate cppcheck
if [ -z $NOANALYSIS ] && [ -n "$USE_CPPCHECK" ]
then
  log "evaluate cppcheck findings ..."
  source "$SCRIPTDIR/backends/cppcheck/cppcheck-evaluate.sh"
  evaluate_cppcheck || ANALYSISRESULT=$?
fi

# evaluate plain
if [ -z $NOANALYSIS ] && [ -n "$USE_PLAIN" ]
then
  log "evaluate plain wrapper ..."
  source "$SCRIPTDIR/backends/plain/plain-evaluate.sh"
  evaluate_plain || ANALYSISRESULT=$?
fi

# evaluate infer
if [ -z "$NOANALYSIS" ] && [ -n "$USE_INFER" ]
then
  log "evaluate infer wrapper ..."
  source "$SCRIPTDIR/backends/infer/infer-evaluate.sh"
  evaluate_infer || ANALYSISRESULT=$?
fi

# evaluate fortify
if [ -z $NOANALYSIS ] && [ -n "$USE_FORTIFY" ]
then
  log "evaluate fortify wrapper ..."
  source "$SCRIPTDIR/backends/fortify/fortify-evaluate.sh"
  evaluate_fortify || ANALYSISRESULT=$?
fi

# check CBMC data
if [ -z "$NOANALYSIS" ] && [ "$USE_GOTOCC" == "--use-gotocc" ]
then
  log "evaluate cbmc wrapper ..."
  source "$SCRIPTDIR/backends/cbmc/cbmc-evaluate.sh"
  evaluate_cbmc || ANALYSISRESULT=$?
fi

# in case of an error, select the exit code with the error, prioritize analysis over build
if [ "$ANALYSISRESULT" -eq 0 ]
then
  exit $BUILDRESULT
else
  exit $ANALYSISRESULT
fi
